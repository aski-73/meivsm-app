package com.aveyon.meivsm.web3;

import com.aveyon.meivsm.interfaces.GenericContractInterface;

import java.math.BigInteger;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.concurrent.Callable;

import org.jetbrains.annotations.NotNull;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple3;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

@SuppressWarnings("rawtypes")
public class CrowdfundingContract extends Contract implements GenericContractInterface {
    public static final String BINARY = "0x60806040526040518060400160405280600581526020017f5354415254000000000000000000000000000000000000000000000000000000815250600090805190602001906200005192919062000066565b503480156200005f57600080fd5b5062000115565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620000a957805160ff1916838001178555620000da565b82800160010185558215620000da579182015b82811115620000d9578251825591602001919060010190620000bc565b5b509050620000e99190620000ed565b5090565b6200011291905b808211156200010e576000816000905550600101620000f4565b5090565b90565b61206d80620001256000396000f3fe6080604052600436106100915760003560e01c80636904c94d116100595780636904c94d1461042c578063853255cc146104835780639977c78a146104ae578063c19d93fb14610537578063c24a0f8b146105c757610091565b80631a32916d146100a0578063344ce0f81461015b57806340193883146101fa578063465c4105146102255780634a79d50c1461039c575b34801561009d57600080fd5b50005b610159600480360360208110156100b657600080fd5b81019080803590602001906401000000008111156100d357600080fd5b8201836020820111156100e557600080fd5b8035906020019184600183028401116401000000008311171561010757600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505091929192905050506105f2565b005b34801561016757600080fd5b506101aa6004803603602081101561017e57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611a43565b604051808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001838152602001828152602001935050505060405180910390f35b34801561020657600080fd5b5061020f611a8d565b6040518082815260200191505060405180910390f35b34801561023157600080fd5b506103826004803603604081101561024857600080fd5b810190808035906020019064010000000081111561026557600080fd5b82018360208201111561027757600080fd5b8035906020019184600183028401116401000000008311171561029957600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290803590602001906401000000008111156102fc57600080fd5b82018360208201111561030e57600080fd5b8035906020019184600183028401116401000000008311171561033057600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290505050611a93565b604051808215151515815260200191505060405180910390f35b3480156103a857600080fd5b506103b1611b82565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156103f15780820151818401526020810190506103d6565b50505050905090810190601f16801561041e5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561043857600080fd5b50610441611c20565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561048f57600080fd5b50610498611c46565b6040518082815260200191505060405180910390f35b3480156104ba57600080fd5b506104e7600480360360208110156104d157600080fd5b8101908080359060200190929190505050611c4c565b604051808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001838152602001828152602001935050505060405180910390f35b34801561054357600080fd5b5061054c611ca3565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561058c578082015181840152602081019050610571565b50505050905090810190601f1680156105b95780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156105d357600080fd5b506105dc611d41565b6040518082815260200191505060405180910390f35b6106cb60008054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561068b5780601f106106605761010080835404028352916020019161068b565b820191906000526020600020905b81548152906001019060200180831161066e57829003601f168201915b50505050506040518060400160405280600581526020017f5354415254000000000000000000000000000000000000000000000000000000815250611a93565b80156107125750610711816040518060400160405280600481526020017f696e697400000000000000000000000000000000000000000000000000000000815250611a93565b5b15610824576040518060400160405280600781526020017f435245415445440000000000000000000000000000000000000000000000000081525060009080519060200190610762929190611f65565b50737f181def2e46196a239ac423a2b77e2e6a4d54a6600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550620d2f0042016004819055506040518060400160405280601081526020017f497267656e6465696e50726f6a656b74000000000000000000000000000000008152506005908051906020019061080f929190611f65565b50678ac7230489e80000600681905550611a40565b6108fd60008054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156108bd5780601f10610892576101008083540402835291602001916108bd565b820191906000526020600020905b8154815290600101906020018083116108a057829003601f168201915b50505050506040518060400160405280600781526020017f4352454154454400000000000000000000000000000000000000000000000000815250611a93565b80156109445750610943816040518060400160405280600481526020017f7061792a00000000000000000000000000000000000000000000000000000000815250611a93565b5b801561095257506004544211155b801561095f575060065434105b15610aa35761096c611fe5565b60405180606001604052803373ffffffffffffffffffffffffffffffffffffffff16815260200142815260200134815250905080600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506020820151816001015560408201518160020155905050610a4681611d47565b6040518060400160405280600781526020017f46554e44494e470000000000000000000000000000000000000000000000000081525060009080519060200190610a91929190611f65565b50346007540160078190555050611a3f565b610b7c60008054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610b3c5780601f10610b1157610100808354040283529160200191610b3c565b820191906000526020600020905b815481529060010190602001808311610b1f57829003601f168201915b50505050506040518060400160405280600781526020017f46554e44494e4700000000000000000000000000000000000000000000000000815250611a93565b8015610bc35750610bc2816040518060400160405280600481526020017f7061792a00000000000000000000000000000000000000000000000000000000815250611a93565b5b8015610bd157506004544211155b8015610be257506006543460075401105b15610d2657610bef611fe5565b60405180606001604052803373ffffffffffffffffffffffffffffffffffffffff16815260200142815260200134815250905080600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506020820151816001015560408201518160020155905050610cc981611d47565b6040518060400160405280600781526020017f46554e44494e470000000000000000000000000000000000000000000000000081525060009080519060200190610d14929190611f65565b50346007540160078190555050611a3e565b610dff60008054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610dbf5780601f10610d9457610100808354040283529160200191610dbf565b820191906000526020600020905b815481529060010190602001808311610da257829003601f168201915b50505050506040518060400160405280600781526020017f4352454154454400000000000000000000000000000000000000000000000000815250611a93565b8015610e465750610e45816040518060400160405280600481526020017f7061792a00000000000000000000000000000000000000000000000000000000815250611a93565b5b8015610e5457506004544211155b8015610e6257506006543410155b15610fcb57610e6f611fe5565b60405180606001604052803373ffffffffffffffffffffffffffffffffffffffff16815260200142815260200134815250905080600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506020820151816001015560408201518160020155905050610f4981611d47565b6040518060400160405280600a81526020017f5355434345535346554c0000000000000000000000000000000000000000000081525060009080519060200190610f94929190611f65565b50610fc53460075401600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16611e72565b50611a3d565b6110a460008054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156110645780601f1061103957610100808354040283529160200191611064565b820191906000526020600020905b81548152906001019060200180831161104757829003601f168201915b50505050506040518060400160405280600781526020017f4352454154454400000000000000000000000000000000000000000000000000815250611a93565b80156110eb57506110ea816040518060400160405280600481526020017f7061792a00000000000000000000000000000000000000000000000000000000815250611a93565b5b80156110f8575060045442115b1561123957611105611fe5565b60405180606001604052803373ffffffffffffffffffffffffffffffffffffffff16815260200142815260200134815250905080600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010155604082015181600201559050506111df81611d47565b6040518060400160405280600681526020017f4641494c454400000000000000000000000000000000000000000000000000008152506000908051906020019061122a929190611f65565b50611233611edc565b50611a3c565b61131260008054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156112d25780601f106112a7576101008083540402835291602001916112d2565b820191906000526020600020905b8154815290600101906020018083116112b557829003601f168201915b50505050506040518060400160405280600781526020017f46554e44494e4700000000000000000000000000000000000000000000000000815250611a93565b80156113595750611358816040518060400160405280600481526020017f7061792a00000000000000000000000000000000000000000000000000000000815250611a93565b5b801561136b5750600654346007540110155b801561137957506004544211155b156114e257611386611fe5565b60405180606001604052803373ffffffffffffffffffffffffffffffffffffffff16815260200142815260200134815250905080600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550602082015181600101556040820151816002015590505061146081611d47565b6040518060400160405280600a81526020017f5355434345535346554c00000000000000000000000000000000000000000000815250600090805190602001906114ab929190611f65565b506114dc3460075401600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16611e72565b50611a3b565b6115bb60008054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561157b5780601f106115505761010080835404028352916020019161157b565b820191906000526020600020905b81548152906001019060200180831161155e57829003601f168201915b50505050506040518060400160405280600781526020017f46554e44494e4700000000000000000000000000000000000000000000000000815250611a93565b80156116025750611601816040518060400160405280600481526020017f7061792a00000000000000000000000000000000000000000000000000000000815250611a93565b5b801561160f575060045442115b156117505761161c611fe5565b60405180606001604052803373ffffffffffffffffffffffffffffffffffffffff16815260200142815260200134815250905080600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010155604082015181600201559050506116f681611d47565b6040518060400160405280600681526020017f4641494c4544000000000000000000000000000000000000000000000000000081525060009080519060200190611741929190611f65565b5061174a611edc565b50611a3a565b61182960008054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156117e95780601f106117be576101008083540402835291602001916117e9565b820191906000526020600020905b8154815290600101906020018083116117cc57829003601f168201915b50505050506040518060400160405280600681526020017f4641494c45440000000000000000000000000000000000000000000000000000815250611a93565b8015611870575061186f816040518060400160405280600481526020017f6578697400000000000000000000000000000000000000000000000000000000815250611a93565b5b156118c6576040518060400160405280600381526020017f454e440000000000000000000000000000000000000000000000000000000000815250600090805190602001906118c0929190611f65565b50611a39565b61199f60008054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561195f5780601f106119345761010080835404028352916020019161195f565b820191906000526020600020905b81548152906001019060200180831161194257829003601f168201915b50505050506040518060400160405280600a81526020017f5355434345535346554c00000000000000000000000000000000000000000000815250611a93565b80156119e657506119e5816040518060400160405280600481526020017f6578697400000000000000000000000000000000000000000000000000000000815250611a93565b5b15611a38576040518060400160405280600381526020017f454e44000000000000000000000000000000000000000000000000000000000081525060009080519060200190611a36929190611f65565b505b5b5b5b5b5b5b5b5b50565b60026020528060005260406000206000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010154908060020154905083565b60065481565b6000816040516020018082805190602001908083835b60208310611acc5780518252602082019150602081019050602083039250611aa9565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405160208183030381529060405280519060200120836040516020018082805190602001908083835b60208310611b3e5780518252602082019150602081019050602083039250611b1b565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040516020818303038152906040528051906020012014905092915050565b60058054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611c185780601f10611bed57610100808354040283529160200191611c18565b820191906000526020600020905b815481529060010190602001808311611bfb57829003601f168201915b505050505081565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60075481565b60018181548110611c5957fe5b90600052602060002090600302016000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010154908060020154905083565b60008054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611d395780601f10611d0e57610100808354040283529160200191611d39565b820191906000526020600020905b815481529060010190602001808311611d1c57829003601f168201915b505050505081565b60045481565b600073ffffffffffffffffffffffffffffffffffffffff1660026000836000015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415611e6f576001819080600181540180825580915050906001820390600052602060002090600302016000909192909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010155604082015181600201555050505b50565b813073ffffffffffffffffffffffffffffffffffffffff163110611ed8578073ffffffffffffffffffffffffffffffffffffffff166108fc839081150290604051600060405180830381858888f19350505050158015611ed6573d6000803e3d6000fd5b505b5050565b60008090505b600180549050811015611f6257611f5560018281548110611eff57fe5b90600052602060002090600302016002015460018381548110611f1e57fe5b906000526020600020906003020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16611e72565b8080600101915050611ee2565b50565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10611fa657805160ff1916838001178555611fd4565b82800160010185558215611fd4579182015b82811115611fd3578251825591602001919060010190611fb8565b5b509050611fe1919061201c565b5090565b6040518060600160405280600073ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001600081525090565b61203e91905b8082111561203a576000816000905550600101612022565b5090565b9056fea165627a7a723058206fad60bd0e27ef39965fd194f53da25cecf589ddbe4339d30ca729e153328f300029";

    public static final String FUNC_SENDERMAP = "senderMap";

    public static final String FUNC_GOAL = "goal";

    public static final String FUNC_TITLE = "title";

    public static final String FUNC_COMPANY = "company";

    public static final String FUNC_SUM = "sum";

    public static final String FUNC_SENDERS = "senders";

    public static final String FUNC_STATE = "state";

    public static final String FUNC_ENDDATE = "endDate";

    public static final String FUNC_HANDLE = "handle";

    public static final String FUNC_ISEQUAL = "isEqual";

    protected static final HashMap<String, String> _addresses;

    private String category = "crowdfunding";

    static {
        _addresses = new HashMap<String, String>();
        _addresses.put("5777", "0xD635bCD5475C970A272f3aD54640EA2Fc9C63bD4");
    }

    @Deprecated
    protected CrowdfundingContract(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected CrowdfundingContract(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected CrowdfundingContract(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected CrowdfundingContract(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public RemoteFunctionCall<Tuple3<String, BigInteger, BigInteger>> senderMap(String param0) {
        final Function function = new Function(FUNC_SENDERMAP, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        return new RemoteFunctionCall<Tuple3<String, BigInteger, BigInteger>>(function,
                new Callable<Tuple3<String, BigInteger, BigInteger>>() {
                    @Override
                    public Tuple3<String, BigInteger, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple3<String, BigInteger, BigInteger>(
                                (String) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue(), 
                                (BigInteger) results.get(2).getValue());
                    }
                });
    }

    public RemoteFunctionCall<BigInteger> goal() {
        final Function function = new Function(FUNC_GOAL, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<String> title() {
        final Function function = new Function(FUNC_TITLE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<String> company() {
        final Function function = new Function(FUNC_COMPANY, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<BigInteger> sum() {
        final Function function = new Function(FUNC_SUM, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<Tuple3<String, BigInteger, BigInteger>> senders(BigInteger param0) {
        final Function function = new Function(FUNC_SENDERS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        return new RemoteFunctionCall<Tuple3<String, BigInteger, BigInteger>>(function,
                new Callable<Tuple3<String, BigInteger, BigInteger>>() {
                    @Override
                    public Tuple3<String, BigInteger, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple3<String, BigInteger, BigInteger>(
                                (String) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue(), 
                                (BigInteger) results.get(2).getValue());
                    }
                });
    }

    public RemoteFunctionCall<String> state() {
        final Function function = new Function(FUNC_STATE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<BigInteger> endDate() {
        final Function function = new Function(FUNC_ENDDATE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> handle(String input, BigInteger weiValue) {
        final Function function = new Function(
                FUNC_HANDLE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(input)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function, weiValue);
    }

    public RemoteFunctionCall<Boolean> isEqual(String a, String b) {
        final Function function = new Function(FUNC_ISEQUAL, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(a), 
                new org.web3j.abi.datatypes.Utf8String(b)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    @Deprecated
    public static CrowdfundingContract load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new CrowdfundingContract(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static CrowdfundingContract load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new CrowdfundingContract(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static CrowdfundingContract load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new CrowdfundingContract(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static CrowdfundingContract load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new CrowdfundingContract(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<CrowdfundingContract> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(CrowdfundingContract.class, web3j, credentials, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<CrowdfundingContract> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(CrowdfundingContract.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    public static RemoteCall<CrowdfundingContract> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(CrowdfundingContract.class, web3j, transactionManager, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<CrowdfundingContract> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(CrowdfundingContract.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }

    protected String getStaticDeployedAddress(String networkId) {
        return _addresses.get(networkId);
    }

    public static String getPreviouslyDeployedAddress(String networkId) {
        return _addresses.get(networkId);
    }

//    @Override
//    public boolean isValid() {
//        return true;
//    }

    @NotNull
    @Override
    public String getCategory() {
        return category;
    }

    @Override
    public void setCategory(String category) {
        this.category = category;
    }
}
